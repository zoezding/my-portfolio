"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/remark-html";
exports.ids = ["vendor-chunks/remark-html"];
exports.modules = {

/***/ "(rsc)/./node_modules/remark-html/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/remark-html/lib/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ remarkHtml)\n/* harmony export */ });\n/* harmony import */ var hast_util_sanitize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hast-util-sanitize */ \"(rsc)/./node_modules/hast-util-sanitize/lib/index.js\");\n/* harmony import */ var mdast_util_to_hast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mdast-util-to-hast */ \"(rsc)/./node_modules/mdast-util-to-hast/lib/index.js\");\n/* harmony import */ var hast_util_to_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hast-util-to-html */ \"(rsc)/./node_modules/hast-util-to-html/lib/index.js\");\n/**\n * @typedef {import('hast-util-sanitize').Schema} Schema\n * @typedef {import('hast-util-to-html').Options} ToHtmlOptions\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-to-hast').Handlers} Handlers\n * @typedef {import('unified').Compiler<Root, string>} Compiler\n * @typedef {import('unified').Processor<undefined, undefined, undefined, Root, string>} Processor\n */\n\n/**\n * @typedef ExtraOptionsFields\n *   Extra fields.\n * @property {Readonly<Handlers> | null | undefined} [handlers]\n *   How to turn mdast nodes into hast nodes (optional);\n *   passed to `mdast-util-to-hast`.\n * @property {Readonly<Schema> | boolean | null | undefined} [sanitize]\n *   Sanitize the output, and how (default: `true`).\n *\n * @typedef {ToHtmlOptions & ExtraOptionsFields} Options\n *   Configuration.\n */\n\n\n\n\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n\n/**\n * Serialize markdown as HTML.\n *\n * ###### Notes\n *\n * Passing `sanitize: false` is dangerous.\n * It allows arbitrary HTML and does not sanitize elements.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nfunction remarkHtml(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = this\n  const {handlers, sanitize: clean, ...toHtmlOptions} = options || emptyOptions\n  let allowDangerousHtml = false\n  /** @type {Readonly<Schema> | undefined} */\n  let schema\n\n  if (typeof clean === 'boolean') {\n    allowDangerousHtml = !clean\n  } else if (clean) {\n    schema = clean\n  }\n\n  self.compiler = compiler\n\n  /**\n   * @type {Compiler}\n   */\n  function compiler(tree, file) {\n    const hast = (0,mdast_util_to_hast__WEBPACK_IMPORTED_MODULE_0__.toHast)(tree, {handlers, allowDangerousHtml})\n    const safeHast = allowDangerousHtml ? hast : (0,hast_util_sanitize__WEBPACK_IMPORTED_MODULE_1__.sanitize)(hast, schema)\n    const result = (0,hast_util_to_html__WEBPACK_IMPORTED_MODULE_2__.toHtml)(safeHast, {...toHtmlOptions, allowDangerousHtml})\n\n    if (file.extname) {\n      file.extname = '.html'\n    }\n\n    // Add an eof eol.\n    return tree &&\n      tree.type === 'root' &&\n      result &&\n      /[^\\r\\n]/.test(result.charAt(result.length - 1))\n      ? result + '\\n'\n      : result\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLWh0bWwvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBLGFBQWEscUNBQXFDO0FBQ2xELGFBQWEscUNBQXFDO0FBQ2xELGFBQWEsc0JBQXNCO0FBQ25DLGFBQWEsdUNBQXVDO0FBQ3BELGFBQWEsMENBQTBDO0FBQ3ZELGFBQWEsNEVBQTRFO0FBQ3pGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsdUNBQXVDO0FBQ3JEO0FBQ0E7QUFDQSxjQUFjLCtDQUErQztBQUM3RDtBQUNBO0FBQ0EsYUFBYSxvQ0FBb0M7QUFDakQ7QUFDQTs7QUFFMkM7QUFDRjtBQUNEOztBQUV4QyxXQUFXLG1CQUFtQjtBQUM5Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxzQ0FBc0M7QUFDakQ7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNlO0FBQ2YsYUFBYSxXQUFXO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLFNBQVMsNkNBQTZDO0FBQ3REO0FBQ0EsYUFBYSw4QkFBOEI7QUFDM0M7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBOztBQUVBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxpQkFBaUIsMERBQU0sUUFBUSw2QkFBNkI7QUFDNUQsaURBQWlELDREQUFRO0FBQ3pELG1CQUFtQix5REFBTSxZQUFZLHFDQUFxQzs7QUFFMUU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3poaXlpZGluZy9SZXBvL215LXBvcnRmb2xpby9ub2RlX21vZHVsZXMvcmVtYXJrLWh0bWwvbGliL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdC11dGlsLXNhbml0aXplJykuU2NoZW1hfSBTY2hlbWFcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QtdXRpbC10by1odG1sJykuT3B0aW9uc30gVG9IdG1sT3B0aW9uc1xuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QnKS5Sb290fSBSb290XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtZGFzdC11dGlsLXRvLWhhc3QnKS5IYW5kbGVyc30gSGFuZGxlcnNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaWZpZWQnKS5Db21waWxlcjxSb290LCBzdHJpbmc+fSBDb21waWxlclxuICogQHR5cGVkZWYge2ltcG9ydCgndW5pZmllZCcpLlByb2Nlc3Nvcjx1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBSb290LCBzdHJpbmc+fSBQcm9jZXNzb3JcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIEV4dHJhT3B0aW9uc0ZpZWxkc1xuICogICBFeHRyYSBmaWVsZHMuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PEhhbmRsZXJzPiB8IG51bGwgfCB1bmRlZmluZWR9IFtoYW5kbGVyc11cbiAqICAgSG93IHRvIHR1cm4gbWRhc3Qgbm9kZXMgaW50byBoYXN0IG5vZGVzIChvcHRpb25hbCk7XG4gKiAgIHBhc3NlZCB0byBgbWRhc3QtdXRpbC10by1oYXN0YC5cbiAqIEBwcm9wZXJ0eSB7UmVhZG9ubHk8U2NoZW1hPiB8IGJvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkfSBbc2FuaXRpemVdXG4gKiAgIFNhbml0aXplIHRoZSBvdXRwdXQsIGFuZCBob3cgKGRlZmF1bHQ6IGB0cnVlYCkuXG4gKlxuICogQHR5cGVkZWYge1RvSHRtbE9wdGlvbnMgJiBFeHRyYU9wdGlvbnNGaWVsZHN9IE9wdGlvbnNcbiAqICAgQ29uZmlndXJhdGlvbi5cbiAqL1xuXG5pbXBvcnQge3Nhbml0aXplfSBmcm9tICdoYXN0LXV0aWwtc2FuaXRpemUnXG5pbXBvcnQge3RvSGFzdH0gZnJvbSAnbWRhc3QtdXRpbC10by1oYXN0J1xuaW1wb3J0IHt0b0h0bWx9IGZyb20gJ2hhc3QtdXRpbC10by1odG1sJ1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE9wdGlvbnM+fSAqL1xuY29uc3QgZW1wdHlPcHRpb25zID0ge31cblxuLyoqXG4gKiBTZXJpYWxpemUgbWFya2Rvd24gYXMgSFRNTC5cbiAqXG4gKiAjIyMjIyMgTm90ZXNcbiAqXG4gKiBQYXNzaW5nIGBzYW5pdGl6ZTogZmFsc2VgIGlzIGRhbmdlcm91cy5cbiAqIEl0IGFsbG93cyBhcmJpdHJhcnkgSFRNTCBhbmQgZG9lcyBub3Qgc2FuaXRpemUgZWxlbWVudHMuXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxPcHRpb25zPiB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRpb25zXVxuICogICBDb25maWd1cmF0aW9uIChvcHRpb25hbCkuXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1hcmtIdG1sKG9wdGlvbnMpIHtcbiAgLyoqIEB0eXBlIHtQcm9jZXNzb3J9ICovXG4gIC8vIEB0cy1leHBlY3QtZXJyb3I6IFRTIGluIEpTRG9jIGdlbmVyYXRlcyB3cm9uZyB0eXBlcyBpZiBgdGhpc2AgaXMgdHlwZWQgcmVndWxhcmx5LlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9uby10aGlzLWFzc2lnbm1lbnRcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgY29uc3Qge2hhbmRsZXJzLCBzYW5pdGl6ZTogY2xlYW4sIC4uLnRvSHRtbE9wdGlvbnN9ID0gb3B0aW9ucyB8fCBlbXB0eU9wdGlvbnNcbiAgbGV0IGFsbG93RGFuZ2Vyb3VzSHRtbCA9IGZhbHNlXG4gIC8qKiBAdHlwZSB7UmVhZG9ubHk8U2NoZW1hPiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IHNjaGVtYVxuXG4gIGlmICh0eXBlb2YgY2xlYW4gPT09ICdib29sZWFuJykge1xuICAgIGFsbG93RGFuZ2Vyb3VzSHRtbCA9ICFjbGVhblxuICB9IGVsc2UgaWYgKGNsZWFuKSB7XG4gICAgc2NoZW1hID0gY2xlYW5cbiAgfVxuXG4gIHNlbGYuY29tcGlsZXIgPSBjb21waWxlclxuXG4gIC8qKlxuICAgKiBAdHlwZSB7Q29tcGlsZXJ9XG4gICAqL1xuICBmdW5jdGlvbiBjb21waWxlcih0cmVlLCBmaWxlKSB7XG4gICAgY29uc3QgaGFzdCA9IHRvSGFzdCh0cmVlLCB7aGFuZGxlcnMsIGFsbG93RGFuZ2Vyb3VzSHRtbH0pXG4gICAgY29uc3Qgc2FmZUhhc3QgPSBhbGxvd0Rhbmdlcm91c0h0bWwgPyBoYXN0IDogc2FuaXRpemUoaGFzdCwgc2NoZW1hKVxuICAgIGNvbnN0IHJlc3VsdCA9IHRvSHRtbChzYWZlSGFzdCwgey4uLnRvSHRtbE9wdGlvbnMsIGFsbG93RGFuZ2Vyb3VzSHRtbH0pXG5cbiAgICBpZiAoZmlsZS5leHRuYW1lKSB7XG4gICAgICBmaWxlLmV4dG5hbWUgPSAnLmh0bWwnXG4gICAgfVxuXG4gICAgLy8gQWRkIGFuIGVvZiBlb2wuXG4gICAgcmV0dXJuIHRyZWUgJiZcbiAgICAgIHRyZWUudHlwZSA9PT0gJ3Jvb3QnICYmXG4gICAgICByZXN1bHQgJiZcbiAgICAgIC9bXlxcclxcbl0vLnRlc3QocmVzdWx0LmNoYXJBdChyZXN1bHQubGVuZ3RoIC0gMSkpXG4gICAgICA/IHJlc3VsdCArICdcXG4nXG4gICAgICA6IHJlc3VsdFxuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-html/lib/index.js\n");

/***/ })

};
;